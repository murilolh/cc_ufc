/* Generated By:JavaCC: Do not edit this line. Grammar.java */
package javacc;

import syntaxtree.*;
import visitor.*;

public class Grammar implements GrammarConstants {

  final public Token getToken() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case IF:
      jj_consume_token(IF);
      break;
    case ELSE:
      jj_consume_token(ELSE);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      break;
    case SOP:
      jj_consume_token(SOP);
      break;
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case STATIC:
      jj_consume_token(STATIC);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    case MAIN:
      jj_consume_token(MAIN);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case EXTENDS:
      jj_consume_token(EXTENDS);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case LENGTH:
      jj_consume_token(LENGTH);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    case DOT:
      jj_consume_token(DOT);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case COMMA:
      jj_consume_token(COMMA);
      break;
    case EXCL:
      jj_consume_token(EXCL);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case BRACE_L:
      jj_consume_token(BRACE_L);
      break;
    case BRACE_R:
      jj_consume_token(BRACE_R);
      break;
    case PAREN_L:
      jj_consume_token(PAREN_L);
      break;
    case PAREN_R:
      jj_consume_token(PAREN_R);
      break;
    case BRACKET_L:
      jj_consume_token(BRACKET_L);
      break;
    case BRACKET_R:
      jj_consume_token(BRACKET_R);
      break;
    case SUM:
      jj_consume_token(SUM);
      break;
    case SUB:
      jj_consume_token(SUB);
      break;
    case MULTI:
      jj_consume_token(MULTI);
      break;
    case LESSTHAN:
      jj_consume_token(LESSTHAN);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case UNDERSCORE:
      jj_consume_token(UNDERSCORE);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case ERR:
      jj_consume_token(ERR);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return this.token;}
    throw new Error("Missing return statement in function");
  }

  final public TProgram Program() throws ParseException {
 TMainClass mc; TClassDeclList cdl;
    mc = MainClass();
    cdl = ClassDeclList();
                                           {if (true) return new TProgram(mc, cdl);}
    throw new Error("Missing return statement in function");
  }

  final public TMainClass MainClass() throws ParseException {
 Token id1; Token id2; TStatement st;
    jj_consume_token(CLASS);
    id1 = jj_consume_token(ID);
    jj_consume_token(BRACE_L);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(PAREN_L);
    jj_consume_token(STRING);
    jj_consume_token(BRACKET_L);
    jj_consume_token(BRACKET_R);
    id2 = jj_consume_token(ID);
    jj_consume_token(PAREN_R);
    jj_consume_token(BRACE_L);
    st = Statement();
    jj_consume_token(BRACE_R);
    jj_consume_token(BRACE_R);
    {if (true) return new TMainClass(new TIdentifier(id1.image), new TIdentifier(id2.image), st);}
    throw new Error("Missing return statement in function");
  }

  final public TClassDeclList ClassDeclList() throws ParseException {
 TClassDecl cd; TClassDeclList cl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      cd = ClassDecl();
      cl = ClassDeclList();
                    cl.addElement(cd);
                    {if (true) return cl;}
      break;
    case 0:
      jj_consume_token(0);
                                 {if (true) return new TClassDeclList();}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TClassDecl ClassDecl() throws ParseException {
 Token id1; TIdentifier cde; TVarDeclList vdl; TMethodDeclList mdl;
    jj_consume_token(CLASS);
    id1 = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      cde = ClassDeclExtends();
      jj_consume_token(BRACE_L);
      vdl = VarDeclList();
      mdl = MethodDeclList();
      jj_consume_token(BRACE_R);
                         {if (true) return new TClassDeclExtends(new TIdentifier(id1.image), cde, vdl, mdl);}
      break;
    case BRACE_L:
      jj_consume_token(BRACE_L);
      vdl = VarDeclList();
      mdl = MethodDeclList();
      jj_consume_token(BRACE_R);
                    {if (true) return new TClassDeclSimple(new TIdentifier(id1.image), vdl, mdl);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TIdentifier ClassDeclExtends() throws ParseException {
  Token id1;
    jj_consume_token(EXTENDS);
    id1 = jj_consume_token(ID);
                                     {if (true) return new TIdentifier(id1.image);}
    throw new Error("Missing return statement in function");
  }

  final public TVarDeclList VarDeclList() throws ParseException {
 TVarDecl vd; TVarDeclList vdl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case ID:
      vd = VarDecl();
      vdl = VarDeclList();
            vdl.addElement(vd);
            {if (true) return vdl;}
      break;
    default:
      jj_la1[3] = jj_gen;

                    {if (true) return new TVarDeclList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TVarDecl VarDecl() throws ParseException {
 TType ty; Token id1;
    ty = Type();
    id1 = jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
                                                   {if (true) return new TVarDecl(ty, new TIdentifier(id1.image));}
    throw new Error("Missing return statement in function");
  }

  final public TType Type() throws ParseException {
 Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_L:
        jj_consume_token(BRACKET_L);
        jj_consume_token(BRACKET_R);
                                     {if (true) return new TTypeIntegerArray();}
        break;
      default:
        jj_la1[4] = jj_gen;

            {if (true) return new TTypeInteger();}
      }
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                  {if (true) return new TTypeBoolean();}
      break;
    case ID:
      id = jj_consume_token(ID);
                  {if (true) return new TTypeIdentifier(id.image);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TMethodDeclList MethodDeclList() throws ParseException {
 TMethodDecl md; TMethodDeclList mdl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      md = MethodDecl();
      mdl = MethodDeclList();
    mdl.addElement(md);
    {if (true) return mdl;}
      break;
    default:
      jj_la1[6] = jj_gen;

        {if (true) return new TMethodDeclList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TMethodDecl MethodDecl() throws ParseException {
 TType ty; Token id1; TFormalList fl; TExp e;
 TVarDeclList vdl = new TVarDeclList();
 TStatementList sl = new TStatementList();
    jj_consume_token(PUBLIC);
    ty = Type();
    id1 = jj_consume_token(ID);
    jj_consume_token(PAREN_L);
    fl = FormalList();
    jj_consume_token(PAREN_R);
    jj_consume_token(BRACE_L);
   VarDeclListMod(vdl,sl);
    jj_consume_token(RETURN);
    e = Exp();
    jj_consume_token(SEMICOLON);
    jj_consume_token(BRACE_R);
    {if (true) return new TMethodDecl(ty, new TIdentifier(id1.image), fl, vdl, sl, e);}
    throw new Error("Missing return statement in function");
  }

  final public void VarDeclListMod(TVarDeclList vdl, TStatementList sl) throws ParseException {
 Token id1; Token id2; TExp e2; TExp e3; TVarDecl vd; TStatement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_L:
        jj_consume_token(BRACKET_L);
        jj_consume_token(BRACKET_R);
        id1 = jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
       vd = new TVarDecl(new TTypeIntegerArray(), new TIdentifier(id1.image));
       vdl.addElement(vd);
       VarDeclListMod(vdl, sl);
        break;
      case ID:
        id1 = jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
       vd = new TVarDecl(new TTypeInteger(), new TIdentifier(id1.image));
       vdl.addElement(vd);
       VarDeclListMod(vdl, sl);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      id1 = jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
     vd = new TVarDecl(new TTypeBoolean(), new TIdentifier(id1.image));
     vdl.addElement(vd);
     VarDeclListMod(vdl, sl);
      break;
    case ID:
      id1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id2 = jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
       vd = new TVarDecl(new TTypeIdentifier(id1.image), new TIdentifier(id2.image));
       vdl.addElement(vd);
       VarDeclListMod(vdl, sl);
        break;
      case BRACKET_L:
        jj_consume_token(BRACKET_L);
        e2 = Exp();
        jj_consume_token(BRACKET_R);
        jj_consume_token(ASSIGN);
        e3 = Exp();
        jj_consume_token(SEMICOLON);
       s = new TStatementArrayAssign(new TIdentifier(id1.image),e2,e3);
        sl = StatementList();
       sl.addElement(s);
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
        e2 = Exp();
        jj_consume_token(SEMICOLON);
       s = new TStatementAssign(new TIdentifier(id1.image),e2);
        sl = StatementList();
       sl.addElement(s);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;

      sl = StatementList();
    }
  }

  final public TFormal Formal() throws ParseException {
 TType ty; Token id1;
    ty = Type();
    id1 = jj_consume_token(ID);
   {if (true) return new TFormal(ty, new TIdentifier(id1.image));}
    throw new Error("Missing return statement in function");
  }

  final public TFormalList FormalList() throws ParseException {
 TFormal f; TFormalList fl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case ID:
      f = Formal();
      fl = FormalRest();
    fl.addElement(f);
    {if (true) return fl;}
      break;
    default:
      jj_la1[10] = jj_gen;

        {if (true) return new TFormalList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TFormalList FormalRest() throws ParseException {
 TFormal f; TFormalList fl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      f = Formal();
      fl = FormalRest();
    fl.addElement(f);
    {if (true) return fl;}
      break;
    default:
      jj_la1[11] = jj_gen;

        {if (true) return new TFormalList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TStatementList StatementList() throws ParseException {
 TStatement s; TStatementList sl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case SOP:
    case BRACE_L:
    case ID:
      s = Statement();
      sl = StatementList();
            sl.addElement(s);
            {if (true) return sl;}
      break;
    default:
      jj_la1[12] = jj_gen;

           {if (true) return new TStatementList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TStatement Statement() throws ParseException {
 int i=0; TStatementList sl; TExp e1; TExp e2; TStatement s1; TStatement s2; Token id1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(PAREN_L);
      e1 = Exp();
      jj_consume_token(PAREN_R);
      s1 = Statement();
      jj_consume_token(ELSE);
      s2 = Statement();
     {if (true) return new TStatementIf(e1,s1,s2);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(PAREN_L);
      e1 = Exp();
      jj_consume_token(PAREN_R);
      s1 = Statement();
     {if (true) return new TStatementWhile(e1,s1);}
      break;
    case SOP:
      jj_consume_token(SOP);
      jj_consume_token(PAREN_L);
      e1 = Exp();
      jj_consume_token(PAREN_R);
      jj_consume_token(SEMICOLON);
     {if (true) return new TStatementPrint(e1);}
      break;
    case ID:
      id1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BRACKET_L:
        jj_consume_token(BRACKET_L);
        e1 = Exp();
        jj_consume_token(BRACKET_R);
        jj_consume_token(ASSIGN);
        e2 = Exp();
        jj_consume_token(SEMICOLON);
       {if (true) return new TStatementArrayAssign(new TIdentifier(id1.image),e1,e2);}
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
        e2 = Exp();
        jj_consume_token(SEMICOLON);
       {if (true) return new TStatementAssign(new TIdentifier(id1.image),e2);}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BRACE_L:
      jj_consume_token(BRACE_L);
      sl = StatementList();
      jj_consume_token(BRACE_R);
       {if (true) return new TStatementBlock(sl);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TExpList ExpList() throws ParseException {
 TExp e; TExpList el;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case EXCL:
    case PAREN_L:
    case ID:
    case NUM:
      e = Exp();
      el = ExpRest();
            el.addElement(e);
            {if (true) return el;}
      break;
    default:
      jj_la1[15] = jj_gen;

                {if (true) return new TExpList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TExpList ExpRest() throws ParseException {
 TExp e; TExpList el;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      e = Exp();
      el = ExpRest();
    el.addElement(e);
            {if (true) return el;}
      break;
    default:
      jj_la1[16] = jj_gen;

                 {if (true) return new TExpList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public TExp Exp() throws ParseException {
 Token id1; TExp e1; TExp e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      id1 = jj_consume_token(NUM);
      e1 = new TExpIntegerLiteral(Integer.parseInt(id1.image));
      break;
    case TRUE:
      jj_consume_token(TRUE);
                      e1 = new TExpTrue();
      break;
    case FALSE:
      jj_consume_token(FALSE);
                      e1 = new TExpFalse();
      break;
    case ID:
      id1 = jj_consume_token(ID);
                      e1 = new TExpId(id1.image);
      break;
    case THIS:
      jj_consume_token(THIS);
                      e1 = new TExpThis();
      break;
    case NEW:
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        jj_consume_token(BRACKET_L);
        e2 = Exp();
        jj_consume_token(BRACKET_R);
           e1 = new TExpNewArray(e2);
        break;
      case ID:
        id1 = jj_consume_token(ID);
        jj_consume_token(PAREN_L);
        jj_consume_token(PAREN_R);
          e1 = new TExpNewObject(new TIdentifier(id1.image));
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case EXCL:
      jj_consume_token(EXCL);
      e2 = Exp();
      e1 = new TExpNot(e2);
      break;
    case PAREN_L:
      jj_consume_token(PAREN_L);
      e1 = Exp();
      jj_consume_token(PAREN_R);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return ExpAux(e1);}
    throw new Error("Missing return statement in function");
  }

  final public TExp ExpAux(TExp e1) throws ParseException {
 Token id2; TExp e2; TExpList el;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
    case SUB:
    case MULTI:
    case LESSTHAN:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
        jj_consume_token(SUM);
        e2 = Exp();
                                  {if (true) return new TExpOpPlus (e1,e2);}
        break;
      case SUB:
        jj_consume_token(SUB);
        e2 = Exp();
                                         {if (true) return new TExpOpMinus (e1,e2);}
        break;
      case MULTI:
        jj_consume_token(MULTI);
        e2 = Exp();
                                           {if (true) return new TExpOpTimes (e1,e2);}
        break;
      case AND:
        jj_consume_token(AND);
        e2 = Exp();
                                         {if (true) return new TExpOpAnd (e1,e2);}
        break;
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        e2 = Exp();
                                              {if (true) return new TExpOpLessThan (e1,e2);}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BRACKET_L:
      jj_consume_token(BRACKET_L);
      e2 = Exp();
      jj_consume_token(BRACKET_R);
      {if (true) return new TExpArrayLookup(e1,e2);}
      break;
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGTH:
        jj_consume_token(LENGTH);
        {if (true) return new TExpArrayLength(e1);}
        break;
      case ID:
        id2 = jj_consume_token(ID);
        jj_consume_token(PAREN_L);
        el = ExpList();
        jj_consume_token(PAREN_R);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return new TExpCall(e1, new TIdentifier(id2.image),el);}
      break;
    default:
      jj_la1[21] = jj_gen;

      {if (true) return e1;}
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public GrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffe01,0x2001,0x80000,0x600000,0x0,0x600000,0x4000,0x0,0x0,0x600000,0x600000,0x40000000,0x1a00,0x0,0x1a00,0x8f000000,0x40000000,0x200000,0x8f000000,0x0,0x800000,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1f0fff,0x0,0x2,0x20000,0x20,0x20000,0x0,0x20020,0x20021,0x20000,0x20000,0x0,0x20002,0x21,0x20002,0x60008,0x0,0x20000,0x60008,0xf80,0x20000,0xfa0,};
   }

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                      }
